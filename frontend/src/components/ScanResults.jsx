import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { ArrowLeft, Download, Code, AlertTriangle, CheckCircle, XCircle, Clock, MessageCircle } from 'lucide-react'
import ReactMarkdown from 'react-markdown'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism'
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import html2canvas from 'html2canvas'
import { useAuth } from './AuthContext';

const ScanResults = ({ scan: propScan, onBack, openChat }) => {
  const { scanId } = useParams()
  const navigate = useNavigate()
  const [scan, setScan] = useState(propScan)
  const [loading, setLoading] = useState(!propScan)
  const [error, setError] = useState(null)
  const [selectedService, setSelectedService] = useState(null)
  const [generatingScript, setGeneratingScript] = useState(false)
  const [patchScript, setPatchScript] = useState('')
  const { token } = useAuth();

  useEffect(() => {
    if (!propScan && scanId) {
      setLoading(true)
      fetch(`/api/scan/${scanId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      })
        .then(res => res.ok ? res.json() : Promise.reject('Not found'))
        .then(data => {
          setScan(data)
          setError(null)
        })
        .catch(err => {
          setScan(null)
          setError('No scan data found.')
        })
        .finally(() => setLoading(false))
    }
  }, [scanId, propScan, token])

  const generatePatchScript = async (serviceIndex) => {
    if (!scan) return
    setGeneratingScript(true)
    try {
      console.log('JWT token:', token);
      const response = await fetch(`/api/generate-script/${scan.scan_id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ service_index: serviceIndex }),
      })
      if (response.ok) {
        const data = await response.json()
        setPatchScript(data.script)
        setSelectedService(serviceIndex)
      }
    } catch (error) {
      // Optionally handle error
    } finally {
      setGeneratingScript(false)
    }
  }

  const getSeverityIcon = (severity) => {
    switch (severity) {
      case 'High':
        return <AlertTriangle className="h-5 w-5 text-danger-600" />
      case 'Medium':
        return <XCircle className="h-5 w-5 text-warning-600" />
      case 'Low':
        return <CheckCircle className="h-5 w-5 text-success-600" />
      default:
        return <Clock className="h-5 w-5 text-gray-600" />
    }
  }

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'High':
        return 'severity-high'
      case 'Medium':
        return 'severity-medium'
      case 'Low':
        return 'severity-low'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const exportReportAsPDF = () => {
    if (!scan) return;
    
    try {
      // Use landscape orientation for wider tables
      const doc = new jsPDF({ unit: 'pt', format: 'a4', orientation: 'landscape' });
      const margin = 40;
      let y = margin;

      // Title
      doc.setFontSize(22);
      doc.setTextColor('#1a202c');
      doc.text('Vulnerability Patch Management Report', margin, y);
      y += 32;

      // Branding line
      doc.setFontSize(10);
      doc.setTextColor('#888');
      doc.text('Generated by VPM', margin, y);
      y += 20;

      // Scan Info
      doc.setFontSize(12);
      doc.setTextColor('#222');
      doc.text(`Scan ID: ${scan.scan_id}`, margin, y);
      y += 16;
      doc.text(`Timestamp: ${new Date(scan.timestamp).toLocaleString()}`, margin, y);
      y += 24;

      // Summary Table
      doc.setFontSize(14);
      doc.setTextColor('#1a202c');
      doc.text('Summary', margin, y);
      y += 18;
      
      if (typeof autoTable === 'function') {
        try {
          autoTable(doc, {
            startY: y,
            head: [['Total Services', 'High Risk', 'Medium Risk', 'Low Risk']],
            body: [[
              scan.summary.total_services,
              scan.summary.high_risk_count,
              scan.summary.medium_risk_count,
              scan.summary.low_risk_count
            ]],
            theme: 'grid',
            styles: { fontSize: 10 },
            margin: { left: margin, right: margin },
            tableWidth: 'auto',
            columnStyles: {
              0: { cellWidth: 60 },
              1: { cellWidth: 50 },
              2: { cellWidth: 50 },
              3: { cellWidth: 50 }
            }
          });
          y = doc.lastAutoTable?.finalY + 20 || y + 100;

          // Services Table
          doc.setFontSize(14);
          doc.setTextColor('#1a202c');
          doc.text('Services', margin, y);
          y += 18;
                  const serviceRows = scan.services.map(svc => [
          svc.service,
          svc.version || 'N/A',
          svc.ip,
          svc.port,
          svc.severity,
          (svc.cve_info || []).slice(0, 2).join(', '), // Limit CVEs to first 2
          svc.recommendation ? 
            svc.recommendation
              .replace(/\*\*/g, '') // Remove bold markdown
              .replace(/\*/g, '') // Remove italic markdown
              .replace(/`/g, '') // Remove code markdown
              .replace(/#{1,6}\s/g, '') // Remove headers
              .replace(/- /g, '• ') // Replace markdown lists with bullet points
              .replace(/\n/g, ' ') // Replace newlines with spaces
              .replace(/\s+/g, ' ') // Replace multiple spaces with single space
              .substring(0, 150) + '...' : 'No recommendation'
        ]);
          autoTable(doc, {
            startY: y,
            head: [['Service', 'Version', 'IP', 'Port', 'Severity', 'CVEs', 'Recommendation']],
            body: serviceRows,
            theme: 'striped',
            styles: { fontSize: 7 },
            headStyles: { fillColor: [30, 64, 175], fontSize: 8 },
            margin: { left: margin, right: margin },
            tableWidth: 'auto',
                      columnStyles: {
            0: { cellWidth: 80 }, // Service
            1: { cellWidth: 60 }, // Version
            2: { cellWidth: 70 }, // IP
            3: { cellWidth: 40 }, // Port
            4: { cellWidth: 50 }, // Severity
            5: { cellWidth: 100 }, // CVEs
            6: { cellWidth: 120 }  // Recommendation
          },
            didDrawPage: function (data) {
              // Add page numbers
              doc.setFontSize(8);
              doc.text('Page ' + doc.getCurrentPageInfo().pageNumber, margin, doc.internal.pageSize.height - 20);
            }
          });
        } catch (tableError) {
          console.warn('Table generation failed, using fallback:', tableError);
          // If table generation fails, fall back to text format
          throw new Error('Table generation failed');
        }
      } else {
        // Fallback without tables - create a better formatted report
        doc.setFontSize(12);
        doc.setTextColor('#222');
        doc.text(`Total Services: ${scan.summary.total_services}`, margin, y);
        y += 16;
        doc.text(`High Risk: ${scan.summary.high_risk_count}`, margin, y);
        y += 16;
        doc.text(`Medium Risk: ${scan.summary.medium_risk_count}`, margin, y);
        y += 16;
        doc.text(`Low Risk: ${scan.summary.low_risk_count}`, margin, y);
        y += 32;

        // Services list with better formatting
        doc.setFontSize(14);
        doc.setTextColor('#1a202c');
        doc.text('Services:', margin, y);
        y += 20;
        
        scan.services.forEach((svc, index) => {
          if (y > 500) { // Adjusted for landscape orientation
            doc.addPage();
            y = margin;
          }
          
          // Service header
          doc.setFontSize(11);
          doc.setTextColor('#333');
          doc.text(`${index + 1}. ${svc.service} ${svc.version || 'N/A'}`, margin, y);
          y += 14;
          
          // Service details
          doc.setFontSize(9);
          doc.setTextColor('#666');
          doc.text(`   IP: ${svc.ip}:${svc.port}`, margin, y);
          y += 12;
          doc.text(`   Severity: ${svc.severity}`, margin, y);
          y += 12;
          
          if (svc.cve_info && svc.cve_info.length > 0) {
            doc.text(`   CVEs: ${svc.cve_info.slice(0, 3).join(', ')}${svc.cve_info.length > 3 ? '...' : ''}`, margin, y);
            y += 12;
          }
          
                    // Recommendation (truncated and cleaned)
          if (svc.recommendation) {
            const cleanRec = svc.recommendation
              .replace(/\*\*/g, '') // Remove bold markdown
              .replace(/\*/g, '') // Remove italic markdown
              .replace(/`/g, '') // Remove code markdown
              .replace(/#{1,6}\s/g, '') // Remove headers
              .replace(/- /g, '• ') // Replace markdown lists with bullet points
              .replace(/\n/g, ' ') // Replace newlines with spaces
              .replace(/\s+/g, ' ') // Replace multiple spaces with single space
              .trim();
            
            const recText = cleanRec.length > 150 ? 
              cleanRec.substring(0, 150) + '...' : 
              cleanRec;
            const lines = doc.splitTextToSize(`   Recommendation: ${recText}`, 600); // Wider text for landscape
             lines.forEach(line => {
               if (y > 500) { // Adjusted for landscape orientation
                 doc.addPage();
                 y = margin;
               }
              doc.text(line, margin, y);
              y += 10;
            });
            y += 8;
          }
          
          y += 8;
        });
        
        // Add page numbers
        const pageCount = doc.getNumberOfPages();
        for (let i = 1; i <= pageCount; i++) {
          doc.setPage(i);
          doc.setFontSize(8);
          doc.setTextColor('#999');
          doc.text(`Page ${i} of ${pageCount}`, margin, doc.internal.pageSize.height - 20);
        }
      }

      doc.save(`vulnerability-report-${scan.scan_id}.pdf`);
    } catch (error) {
      console.error('PDF export error:', error);
      alert('Failed to generate PDF. Please try again.');
    }
  }

  if (loading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
        <p className="mt-4 text-gray-600">Loading scan results...</p>
      </div>
    )
  }
  if (error) {
    return (
      <div className="text-center py-12 text-danger-600">{error}</div>
    )
  }
  if (!scan) {
    return (
      <div className="text-center py-12 text-gray-600">No scan data found.</div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button
            onClick={() => navigate('/dashboard')}
            className="flex items-center space-x-2 text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="h-5 w-5" />
            <span>Back to Dashboard</span>
          </button>
        </div>
        
        <div className="flex items-center space-x-4">
          <button
            onClick={exportReportAsPDF}
            className="btn-secondary flex items-center space-x-2"
          >
            <Download className="h-5 w-5" />
            <span>Export PDF</span>
          </button>
        </div>
      </div>

      {/* Scan Summary */}
      <div className="card">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">Scan Results</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="text-center p-4 bg-gray-50 rounded-lg">
            <p className="text-2xl font-bold text-gray-900">{scan.summary.total_services}</p>
            <p className="text-sm text-gray-600">Total Services</p>
          </div>
          <div className="text-center p-4 bg-danger-50 rounded-lg">
            <p className="text-2xl font-bold text-danger-600">{scan.summary.high_risk_count}</p>
            <p className="text-sm text-danger-600">High Risk</p>
          </div>
          <div className="text-center p-4 bg-warning-50 rounded-lg">
            <p className="text-2xl font-bold text-warning-600">{scan.summary.medium_risk_count}</p>
            <p className="text-sm text-warning-600">Medium Risk</p>
          </div>
          <div className="text-center p-4 bg-success-50 rounded-lg">
            <p className="text-2xl font-bold text-success-600">{scan.summary.low_risk_count}</p>
            <p className="text-sm text-success-600">Low Risk</p>
          </div>
        </div>

        <div className="text-sm text-gray-600">
          <strong>Scan ID:</strong> {scan.scan_id} | 
          <strong>Timestamp:</strong> {new Date(scan.timestamp).toLocaleString()}
        </div>
      </div>

      {/* Services List */}
      <div className="space-y-4">
        {scan.services.map((service, index) => (
          <div key={index} className="card">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center space-x-3 mb-3">
                  {getSeverityIcon(service.severity)}
                  <h3 className="text-lg font-semibold text-gray-900">
                    {service.service} {service.version}
                  </h3>
                  <span className={`px-3 py-1 text-sm font-medium rounded-full border ${getSeverityColor(service.severity)}`}>
                    {service.severity}
                  </span>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <p className="text-sm text-gray-600">IP Address</p>
                    <p className="font-medium">{service.ip}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Port</p>
                    <p className="font-medium">{service.port}</p>
                  </div>
                </div>

                {service.cve_info.length > 0 && (
                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-900 mb-2">Known CVEs:</p>
                    <div className="space-y-1">
                      {service.cve_info.map((cve, cveIndex) => (
                        <div key={cveIndex} className="text-sm bg-red-50 border border-red-200 rounded p-2">
                          {cve}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <div className="mb-4">
                  <p className="text-sm font-medium text-gray-900 mb-2">Recommendation:</p>
                  <div className="prose prose-sm max-w-none">
                    <ReactMarkdown>{service.recommendation}</ReactMarkdown>
                  </div>
                </div>
              </div>

              <div className="ml-4 flex space-x-2">
                <button
                  onClick={() => generatePatchScript(index)}
                  disabled={generatingScript}
                  className="btn-primary flex items-center space-x-2"
                >
                  <Code className="h-4 w-4" />
                  <span>{generatingScript && selectedService === index ? 'Generating...' : 'Generate Script'}</span>
                </button>
                {openChat && (
                  <button
                    onClick={() => openChat(scan.scan_id, index)}
                    className="btn-secondary flex items-center space-x-2"
                    title="Chat about this vulnerability"
                  >
                    <MessageCircle className="h-4 w-4" />
                    <span>Ask AI</span>
                  </button>
                )}
              </div>
            </div>

            {/* Patch Script */}
            {selectedService === index && patchScript && (
              <div className="mt-6 border-t pt-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-3">Automated Patch Script</h4>
                <div className="bg-gray-900 rounded-lg overflow-hidden">
                  <SyntaxHighlighter
                    language="bash"
                    style={tomorrow}
                    customStyle={{
                      margin: 0,
                      padding: '1rem',
                      fontSize: '0.875rem',
                    }}
                  >
                    {patchScript}
                  </SyntaxHighlighter>
                </div>
                <div className="mt-3 flex justify-end">
                  <button
                    onClick={() => {
                      const blob = new Blob([patchScript], { type: 'text/plain' })
                      const url = URL.createObjectURL(blob)
                      const a = document.createElement('a')
                      a.href = url
                      a.download = `patch-${service.service}-${service.version}.sh`
                      document.body.appendChild(a)
                      a.click()
                      document.body.removeChild(a)
                      URL.revokeObjectURL(url)
                    }}
                    className="btn-secondary flex items-center space-x-2"
                  >
                    <Download className="h-4 w-4" />
                    <span>Download Script</span>
                  </button>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  )
}

export default ScanResults 